//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Actions/SteeringWheelInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @SteeringWheelInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @SteeringWheelInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""SteeringWheelInput"",
    ""maps"": [
        {
            ""name"": ""Gas Pedal"",
            ""id"": ""5d67b8bb-5985-46d5-a998-b70f82adbc0b"",
            ""actions"": [
                {
                    ""name"": ""Gas"",
                    ""type"": ""Button"",
                    ""id"": ""f2da23cd-f970-4fed-ae71-d184acce8609"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Break"",
                    ""type"": ""Button"",
                    ""id"": ""a5b4a2bb-6304-4278-8d30-7a50d15a0b52"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""448e049a-05ce-4fe7-a69c-8af3534ef4bc"",
                    ""path"": ""<HID::Thrustmaster Thrustmaster T80 (USB)>/button2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Break"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""80dc9522-fac3-4696-8e94-91fedda6ab18"",
                    ""path"": ""<Joystick>/trigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Gas"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Gas Pedal
        m_GasPedal = asset.FindActionMap("Gas Pedal", throwIfNotFound: true);
        m_GasPedal_Gas = m_GasPedal.FindAction("Gas", throwIfNotFound: true);
        m_GasPedal_Break = m_GasPedal.FindAction("Break", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Gas Pedal
    private readonly InputActionMap m_GasPedal;
    private List<IGasPedalActions> m_GasPedalActionsCallbackInterfaces = new List<IGasPedalActions>();
    private readonly InputAction m_GasPedal_Gas;
    private readonly InputAction m_GasPedal_Break;
    public struct GasPedalActions
    {
        private @SteeringWheelInput m_Wrapper;
        public GasPedalActions(@SteeringWheelInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Gas => m_Wrapper.m_GasPedal_Gas;
        public InputAction @Break => m_Wrapper.m_GasPedal_Break;
        public InputActionMap Get() { return m_Wrapper.m_GasPedal; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GasPedalActions set) { return set.Get(); }
        public void AddCallbacks(IGasPedalActions instance)
        {
            if (instance == null || m_Wrapper.m_GasPedalActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GasPedalActionsCallbackInterfaces.Add(instance);
            @Gas.started += instance.OnGas;
            @Gas.performed += instance.OnGas;
            @Gas.canceled += instance.OnGas;
            @Break.started += instance.OnBreak;
            @Break.performed += instance.OnBreak;
            @Break.canceled += instance.OnBreak;
        }

        private void UnregisterCallbacks(IGasPedalActions instance)
        {
            @Gas.started -= instance.OnGas;
            @Gas.performed -= instance.OnGas;
            @Gas.canceled -= instance.OnGas;
            @Break.started -= instance.OnBreak;
            @Break.performed -= instance.OnBreak;
            @Break.canceled -= instance.OnBreak;
        }

        public void RemoveCallbacks(IGasPedalActions instance)
        {
            if (m_Wrapper.m_GasPedalActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGasPedalActions instance)
        {
            foreach (var item in m_Wrapper.m_GasPedalActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GasPedalActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GasPedalActions @GasPedal => new GasPedalActions(this);
    public interface IGasPedalActions
    {
        void OnGas(InputAction.CallbackContext context);
        void OnBreak(InputAction.CallbackContext context);
    }
}
